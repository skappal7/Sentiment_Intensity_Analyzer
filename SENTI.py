# -*- coding: utf-8 -*-
"""Sentiment_Intensity_Analyzer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NAqOP-k218G3nq7CggpzJ_OcbZ7Wz3D6
"""

import streamlit as st
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
import nltk
from nltk.corpus import stopwords
from nltk.sentiment import SentimentIntensityAnalyzer

# Download the required NLTK data
nltk.download('vader_lexicon')

# Sentiment analysis function
def get_sentiment(text):
    sia = SentimentIntensityAnalyzer()
    sentiment_score = sia.polarity_scores(text)['compound']
    if sentiment_score >= 0.05:
        return 'positive', sentiment_score
    elif sentiment_score <= -0.05:
        return 'negative', sentiment_score
    else:
        return 'neutral', sentiment_score

# Sidebar
st.sidebar.title("Instructions")
st.sidebar.write("""
1. Upload a CSV or text file containing the transcripts.
2. The app will perform sentiment analysis on each transcript.
3. A graph will show the distribution of positive, negative, and neutral sentiments.
4. A histogram will display the distribution of sentiment scores.
5. A table will display the transcripts along with their associated sentiment scores and sentiment classes.
6. You can download the table as a CSV file.
""")

st.sidebar.file_uploader("Upload a file", type=["csv", "txt"])

# Main content
st.title("Sentiment Analysis App")

uploaded_file = st.file_uploader("Choose a CSV or text file", type=["csv", "txt"])

if uploaded_file is not None:
    if uploaded_file.name.endswith('.csv'):
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.DataFrame({'text': [uploaded_file.read().decode('utf-8')]})

    df['sentiment'], df['sentiment_score'] = zip(*df['text'].apply(get_sentiment))

    # Sentiment distribution graph
    st.subheader("Sentiment Distribution")
    sentiment_counts = df['sentiment'].value_counts()
    st.bar_chart(sentiment_counts)

    # Sentiment score histogram
    st.subheader("Sentiment Score Distribution")
    st.histogram(df['sentiment_score'], bins=20)

    # Transcript table with sentiment scores
    st.subheader("Transcripts with Sentiment Scores")
    st.write(df)

    # Download CSV
    csv = df.to_csv(index=False)
    st.download_button(
        label="Download CSV",
        data=csv,
        file_name='transcript_sentiment.csv',
        mime='text/csv',
    )

